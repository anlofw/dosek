namespace os {
namespace scheduler {

using namespace os::tasks;

struct Scheduler  {
    os::scheduler::TaskList tlist;

    Encoded_Static<A0, {{{generate:current_prio_sig}}}> current_prio;
    Encoded_Static<A0, {{{generate:current_task_sig}}}> current_task;

    static constexpr auto scheduler_prio = EC({{{generate:scheduler_prio_sig}}}, {{{generate:scheduler_prio}}});

    forceinline void Reschedule(void) {
        // TODO: control flow check
		tlist.dump();

        // OPTIMIZATION: do not reschedule if RES_SCHEDULER is taken
        if (current_prio != scheduler_prio) {
            // set current (=next) task from task list
            tlist.head(current_task, current_prio);
        }

        // dispatch or enter idle
        // TODO: generated signature
{{{snippet:reschedule_dispatch_task:task|if(current_task == %(task)s.enc_id<1>()) {
    if (%(task)s.preemptable == false) {
        // promote non-preemptable task to RES_SCHEDULER
        tlist.promote(%(task)s.enc_id<1>(), scheduler_prio);
        current_prio = scheduler_prio;
    }
    Dispatcher::Dispatch(%(task)s);
} else }}}
        {{{generate:reschedule_foreach_task}}}if(current_task == TaskList::idle_id) {
            Dispatcher::idle();
        } else {
            assert(false);
        }
    }

    forceinline void Schedule_impl(void) {
        if(in_syscall()) {
            // in syscall: reschedule directly
            Reschedule();
        } else {
            // not in syscall (probably in ISR): request reschedule AST
            // Calls also Reschedule()
            request_reschedule_ast();
        }
    }

    forceinline void SetReady_impl(const Task t) {
        SetReady_impl(t.enc_id<{{{generate:arbitrary_new_signature}}}>());
    }

    forceinline void SetSuspended_impl(const Task t) {
        t.tcb.reset();

        tlist.remove(t.enc_id<{{{generate:arbitrary_new_signature}}}>());
        if (t.preemptable == false) {
            // restore non-preemptable task to original priority
            // this is required for the optimization in Reschedule()
            current_prio = t.enc_prio<{{{generate:arbitrary_new_signature}}}>();
        }
    }

    forceinline void ActivateTask_impl(const Task t) {
        ActivateTask_impl(t.enc_id<{{{generate:arbitrary_new_signature}}}>());
    }

    forceinline void ChainTask_impl(const Task from, const Task to) {
        auto from_id = from.enc_id<{{{generate:arbitrary_new_signature}}}>();
        auto to_id = to.enc_id<{{{generate:arbitrary_new_signature}}}>();
        assert(from_id == current_task);

        SetSuspended_impl(from);

        ActivateTask_impl(to_id);
    }

    forceinline void TerminateTask_impl(const Task from) {
        auto id = from.enc_id<{{{generate:arbitrary_new_signature}}}>();
        assert(id == current_task);

        SetSuspended_impl(from);

        Schedule_impl();
    }

    forceinline void GetResource_impl(const Task current_task, const int new_prio) {
		auto id = current_task.enc_id<1>();
		auto new_prio_encoded = EC(2, new_prio);
		tlist.promote(id, new_prio_encoded);
		current_prio = new_prio_encoded;
    }

    forceinline void ReleaseResource_impl(const Task current_task, const int new_prio) {
		auto id = current_task.enc_id<1>();
		auto new_prio_encoded = EC(2, new_prio);
		tlist.promote(id, new_prio_encoded);
		current_prio = new_prio_encoded;
		Schedule_impl();
    }


	template<typename T>
    forceinline void SetReady_impl(const T id) {
        // TODO: generated signature
{{{snippet:activate_task_task:task,id_sig,prio_sig,task_prio_sig|if (id == %(task)s.enc_id<1>()) {
    value_coded_t signature = tlist.insert(%(task)s.enc_id<%(id_sig)s>(), %(task)s.enc_prio<%(prio_sig)s>());
    assert((signature - (%(task_prio_sig)s - %(prio_sig)s)) %% T::A == 0);
} else }}}

        {{{generate:activate_task_foreach_task}}}{
            assert(false);
        }
    }

    forceinline void SetReadyFromSuspended_impl(const Task task) {
		auto id = task.enc_id<1>();
		auto new_prio_encoded = task.enc_prio<2>();
		tlist.set(id, new_prio_encoded);
    }

    template<typename T>
    forceinline void ActivateTask_impl(const T id) {
        SetReady_impl(id);
        Schedule_impl();
    }

};

constexpr Encoded_Static<A0, {{{generate:scheduler_prio_sig}}}> Scheduler::scheduler_prio;

extern Scheduler scheduler_;

// TODO: more meaningful names
// currently the "normal" name is a syscall wrapper for
// the actual syscall which has ...C suffix

template<typename T>
noinline void ActivateTaskC_impl(const T id) {
    scheduler_.ActivateTask_impl(id);
}

/**
 * @satisfies{13,2,3,1}
 */
forceinline void ActivateTask_impl(const Task& t) {
    auto id = t.enc_id<{{{generate:arbitrary_new_signature}}}>();

    syscall(ActivateTaskC_impl<decltype(id)>, id);
}

forceinline void SetReady_impl(const Task& t) {
    auto id = t.enc_id<{{{generate:arbitrary_new_signature}}}>();
    scheduler_.SetReady_impl(id);
}


noinline void ScheduleC_impl(uint32_t dummy);

/**
 * @satisfies{13,2,3,4}
 */
forceinline void Schedule_impl() {
    syscall(ScheduleC_impl);
}

}; // namespace scheduler
}; // namespace os

namespace os {
namespace scheduler {

Scheduler scheduler_;

noinline void ScheduleC_impl(__attribute__ ((unused)) uint32_t dummy) {
    scheduler_.Reschedule();
}

}; // scheduler
}; // os
