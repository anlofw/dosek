namespace os {
namespace scheduler {

using namespace os::tasks;

#ifdef dOSEK_STATE_REPLICATOR
extern os::redundant::ClassicTMR<os::scheduler::TaskList> state_replicator_;
#else
extern os::redundant::EmptyReplicator state_replicator_;
#endif

struct Scheduler  {
    os::scheduler::TaskList tlist;

    Encoded_Static<A0, {{{generate:current_prio_sig}}}> current_prio;
    Encoded_Static<A0, {{{generate:current_task_sig}}}> current_task;

    static constexpr auto scheduler_prio = EC({{{generate:scheduler_prio_sig}}}, {{{!scheduler_prio}}});

    noinline void Reschedule(void);


    forceinline void Schedule_impl(void) {
        if(in_syscall()) {
            // in syscall: reschedule directly
            Reschedule();
        } else {
            // not in syscall (probably in ISR): request reschedule AST
            // Calls also Reschedule()
            request_reschedule_ast();
        }
    }

	void forceinline SetReady_impl(const Task &task) {
		tlist.activate(task.id, EC(2, task.prio));

        state_replicator_.update();
	}

	void forceinline SetSuspended_impl(const Task &t) {
		t.tcb.reset();

		tlist.remove(t.id);

        state_replicator_.update();
	}


    forceinline void ActivateTask_impl(const Task &to) {
        state_replicator_.check();

		SetReady_impl(to);
		Schedule_impl();
    }

    forceinline void ChainTask_impl(const Task &from, const Task &to) {
        state_replicator_.check();

        SetSuspended_impl(from);
		SetReady_impl(to);
		Schedule_impl();
    }

    forceinline void TerminateTask_impl(const Task &from) {
        state_replicator_.check();

        SetSuspended_impl(from);
        Schedule_impl();
    }

    forceinline void GetResource_impl(const Task &current_task, const int new_prio) {
		SetPriority(current_task, new_prio);
		SetSystemPriority(new_prio);
    }

    forceinline void ReleaseResource_impl(const Task &current_task, const int new_prio) {
		SetPriority(current_task, new_prio);
		SetSystemPriority(new_prio);
		Schedule_impl();
    }

    forceinline void SetReadyFromSuspended_impl(const Task &task) {
		SetPriority(task, task.prio);

		// Clear all Events
		tlist.clear_events(task.id, ~0);

        state_replicator_.update();
    }

	// Low level interface to the task list
	forceinline void SetCurrentTask(const Task &task) {
		if (task.preemptable == false) {
			// promote non-preemptable task to RES_SCHEDULER
			tlist.set(task.id, scheduler_prio);
			current_prio = scheduler_prio;
		}
		current_task = task.enc_id<1>();

        state_replicator_.update();
	}

	forceinline void SetSystemPriority(const int new_prio) {
		auto new_prio_encoded = EC(2, new_prio);
		current_prio = new_prio_encoded;
	}

	forceinline void SetEvent_impl(const Task &other_task, const int event_mask) {
		tlist.set_events(other_task.id, event_mask);
		Schedule_impl();
	}

	forceinline void WaitEvent_impl(const Task &current_task, const int event_mask) {
		tlist.wait_events(current_task.id, event_mask);
		Schedule_impl();
	}

	forceinline void ClearEvent_impl(const Task &current_task, const int event_mask) {
		tlist.clear_events(current_task.id, event_mask);
	}

	forceinline void SetPriority(const Task &task, const int new_prio) {
		auto new_prio_encoded = EC(2, new_prio);
		tlist.set(task.id, new_prio_encoded);

        state_replicator_.update();
	}

	forceinline uint32_t isReady(const Task &task) {
		return tlist.isReady(task.id);
	}
};

void Scheduler::Reschedule(void) {
#ifdef RETRYSCHED
    const auto current_prio_orig = current_prio;
    const auto current_task_orig = current_task;

	// set current (=next) task from task list
	if (tlist.head(current_task, current_prio) != 0) { // retry
		current_task = current_task_orig;
		current_prio = current_prio_orig;
		if (tlist.head(current_task, current_prio) != 0) {
			CALL_HOOK(FaultDetectedHook, RETRY_ERRORdetected, 0, 0);
		}
	}
#else
	// set current (=next) task from task list
	tlist.head(current_task, current_prio);
#endif

	current_task.check();
	current_prio.check();

	// dispatch or enter idle
	// TODO: generated signature
{{{!foreach_subtask|
   if (current_task == {{{!subtask_id}}}) {
{{{!if_not_preemptable|
        // promote non-preemptable task to RES_SCHEDULER
        tlist.set({{{!subtask_id}}}, scheduler_prio);
        current_prio = scheduler_prio;
}}}
        Dispatcher::Dispatch({{{!subtask_desc}}});
	} else \
}}} if(current_task == TaskList::idle_id) {
            Dispatcher::idle();
        } else {
			CALL_HOOK(FaultDetectedHook, LOGIC_ERRORdetected, 0, 0);
        }
    }

constexpr Encoded_Static<A0, {{{generate:scheduler_prio_sig}}}> Scheduler::scheduler_prio;
Scheduler scheduler_;

#ifdef dOSEK_STATE_REPLICATOR
os::redundant::ClassicTMR<os::scheduler::TaskList> state_replicator_(scheduler_.tlist);
#else
os::redundant::EmptyReplicator state_replicator_;
#endif

}; // namespace scheduler
}; // namespace os
