
namespace os {
namespace fsm {

const os::scheduler::Task * dispatch_table[] = {
	0,
{{{!foreach_subtask_sorted|
   &{{{!subtask_desc}}}, /* {{{!subtask_id}}} */
}}}
};


	
class SchedulerFSM : public SimpleFSM {
 public:
    enum {
        IDLE = 0,
		NO_DISPATCH = 255
	};
    SchedulerFSM(SimpleFSM::internal_state_t state) : SimpleFSM(state) {}


	void dispatch(SimpleFSM::task_t task_id) {
		if (task_id == 0) {
			arch::Dispatcher::idle();
		} else if (task_id == 255) {
			return;
		} else if (task_id >= sizeof(dispatch_table)/sizeof(*dispatch_table)) {
			CALL_HOOK(FaultDetectedHook, LOGIC_ERRORdetected, 0, 0);
		} else {
			arch::Dispatcher::Dispatch(*dispatch_table[task_id]);
		}
	}

	void iret(SimpleFSM::task_t task_id) {
		if (task_id != NO_DISPATCH && task_id != IDLE) {
           dispatch(task_id);
	    }
	}
};

SchedulerFSM fsm_engine({{{!get:fsm.initial_state}}});

}
}
