/**
 * @page evaluation Evaluation Scenario

We use a recent version of the [I4Copter](https://www4.cs.fau.de/trac/I4Copter) system as real world evaluation scenario.
The I4Copter system architecture allows to separate functional application code from non-functional OS interaction.
Therefore, we are able to exchange the underlying operating systems easily and evaluate our ''CoRedOS'' and a usual COTS eCos system.
In a first phase we mocked the functional application code and mimic the original execution behavior.

### Fault Injection Parameters ###
Definition of appropriate FI parameters. (With the help of the [FARM [1]](http://homepages.laas.fr/arlat/documents/89124/89124.pdf) model)
See also [Aidemark [2]](http://www.cse.chalmers.se/~johan/publications/Aidemark_RTCSA04.pdf),  injecting faults into a real-time kernel.

- __F__ault Model:
 - Single-bit flip within the OS kernel data structures
 - and Kernelstack

- __A__ctivation:
 - Injection when entering the kernel
 - Interrupt entry (ISR2)
 - Across all system calls within a few hyperperiods. Here we need manifold kernel states:
   - Artificial execution based on the OSEK state model. (high coverage)
   - Realistic execution of the I4Copter system.

- __R__eadout
 - Observable results:
  - Trap/MPU
  - Order of task execution
  - Timeout (endless loop)
  - Fault detection

- __M__easures
 - Result data evaluation. Putting experimental results in SQL database.


## Fail* Fail Injection Framewoek ##
Versatile and full fault space coverage fault injection is realized with the Fail* Fault Injection Framework.

- - -
### Related Work ###
[1] Arlat, Jean, et al. "Fault injection for dependability validation: A methodology and some applications." Software Engineering, IEEE Transactions on 16.2 (1990): 166-182.

[2] Aidemark, Joakim, Peter Folkesson, and Johan Karlsson. *Experimental dependability evaluation of the Artk68-FT real-time kernel.* International Conference on Real-Time and Embedded Computing Systems and Applications. 2004. 


*/
