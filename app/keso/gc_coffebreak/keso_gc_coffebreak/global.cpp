/* THIS FILE IS AUTO-GENERATED BY KESO! DON'T EDIT */

#include "global.h"
#include "domains.h"
void __keso_printc(unsigned char c) { kout << c; }
#include "c7_DebugOut.h"
#include "i33_Closeable.h"
#include "c6_Thread.h"
#include "c1_Object.h"
#include "c3_InputStream.h"
#include "c8_StringBuilder.h"
#include "i34_Runnable.h"
#include "c20_DebugOutPrintStream.h"
#include "c9_QueueElement.h"
#include "c10_Number.h"
#include "c12_OSService.h"
#include "c13_Character.h"
#include "c14_Events.h"
#include "i35_ListPrintService.h"
#include "c21_NullPrintStream.h"
#include "c5_HelloWorld.h"
#include "c15_Math.h"
#include "c16_PortalService.h"
#include "c17_OutputStream.h"
#include "c26_StringIndexOutOfBoundsException.h"
#include "i36_Portal.h"
#include "c23_Throwable.h"
#include "c11_Integer.h"
#include "i37_NonCopyable.h"
#include "c27_GC.h"
#include "c4_Alarm.h"
#include "c28_EventService.h"
#include "c22_DebugOutOutputStream.h"
#include "c19_PrintStream.h"
#include "c24_Exception.h"
#include "c29_String.h"
#include "c30_Class.h"
#include "c31_Config.h"
#include "c32_System.h"
#include "c25_RuntimeException.h"
#include "c18_FilterOutputStream.h"

 KESO_CONST code_t dispatch_table[] = {
};

/* use the CLASS(id) macro to access the class store! */
/* use the CLS_ROFF(id) macro to access the reference offset,
 * CLS_SIZE(id) for the size and CLS_IFACES(id) for the interfaces. */
KESO_CONST class_t class_store[] = {
 /* 0 RESERVED */
 /* 1	java/lang/Object */
 {sizeof(c1_Object_t), 0},
 /* 2	[C */
 {sizeof(jchar), 0},
 /* 3	java/io/InputStream */
 {sizeof(c3_InputStream_t), 0},
 /* 4	keso/core/Alarm */
 {sizeof(c4_Alarm_t), 0},
 /* 5	test/HelloWorld */
 {sizeof(c5_HelloWorld_t), 0},
 /* 6	java/lang/Thread */
 {sizeof(c6_Thread_t), 0},
 /* 7	keso/io/DebugOut */
 {sizeof(c7_DebugOut_t), 0},
 /* 8	java/lang/StringBuilder */
 {sizeof(c8_StringBuilder_t), 1},
 /* 9	test/QueueElement */
 {sizeof(c9_QueueElement_t), 1},
 /* 10	java/lang/Number */
 {sizeof(c10_Number_t), 0},
 /* 11	java/lang/Integer */
 {sizeof(c11_Integer_t), 0},
 /* 12	keso/core/OSService */
 {sizeof(c12_OSService_t), 0},
 /* 13	java/lang/Character */
 {sizeof(c13_Character_t), 0},
 /* 14	keso/core/Events */
 {sizeof(c14_Events_t), 0},
 /* 15	java/lang/Math */
 {sizeof(c15_Math_t), 0},
 /* 16	keso/core/PortalService */
 {sizeof(c16_PortalService_t), 0},
 /* 17	java/io/OutputStream */
 {sizeof(c17_OutputStream_t), 0},
 /* 18	java/io/FilterOutputStream */
 {sizeof(c18_FilterOutputStream_t), 0},
 /* 19	java/io/PrintStream */
 {sizeof(c19_PrintStream_t), 0},
 /* 20	keso/io/DebugOutPrintStream */
 {sizeof(c20_DebugOutPrintStream_t), 0},
 /* 21	keso/io/NullPrintStream */
 {sizeof(c21_NullPrintStream_t), 0},
 /* 22	keso/io/DebugOutOutputStream */
 {sizeof(c22_DebugOutOutputStream_t), 0},
 /* 23	java/lang/Throwable */
 {sizeof(c23_Throwable_t), 1},
 /* 24	java/lang/Exception */
 {sizeof(c24_Exception_t), 1},
 /* 25	java/lang/RuntimeException */
 {sizeof(c25_RuntimeException_t), 1},
 /* 26	java/lang/StringIndexOutOfBoundsException */
 {sizeof(c26_StringIndexOutOfBoundsException_t), 1},
 /* 27	keso/core/GC */
 {sizeof(c27_GC_t), 0},
 /* 28	keso/core/EventService */
 {sizeof(c28_EventService_t), 0},
 /* 29	java/lang/String */
 {sizeof(c29_String_t), 1},
 /* 30	java/lang/Class */
 {sizeof(c30_Class_t), 0},
 /* 31	keso/core/Config */
 {sizeof(c31_Config_t), 0},
 /* 32	java/lang/System */
 {sizeof(c32_System_t), 0},
};

/* global strings */
struct str1_s {
	ARRAY_HEADER
	const jchar data[2];
};
struct str2_s {
	ARRAY_HEADER
	const jchar data[3];
};
struct str10_s {
	ARRAY_HEADER
	const jchar data[11];
};
static struct str1_s str1_arr ALIGN4  ={
/*.gcinfo=*/1, /*.class_id=*/CHAR_ARRAY_ID, /*.size=*/1, {'\t','\0'}/* data */,
};
c29_String_t ALIGN4 str1={
(object_pointer)&str1_arr /* value */,/*.gcinfo=*/1, /*.class_id=*/C29_STRING_ID, 
};
static struct str2_s str0_arr ALIGN4  ={
/*.gcinfo=*/1, /*.class_id=*/CHAR_ARRAY_ID, /*.size=*/2, {'\r','\n','\0'}/* data */,
};
c29_String_t ALIGN4 str0={
(object_pointer)&str0_arr /* value */,/*.gcinfo=*/1, /*.class_id=*/C29_STRING_ID, 
};
static struct str2_s str2_arr ALIGN4  ={
/*.gcinfo=*/1, /*.class_id=*/CHAR_ARRAY_ID, /*.size=*/2, {',',' ','\0'}/* data */,
};
c29_String_t ALIGN4 str2={
(object_pointer)&str2_arr /* value */,/*.gcinfo=*/1, /*.class_id=*/C29_STRING_ID, 
};
static struct str10_s str3_arr ALIGN4  ={
/*.gcinfo=*/1, /*.class_id=*/CHAR_ARRAY_ID, /*.size=*/10, {'Q','u','e','u','e',' ','R','u','n',' ','\0'}/* data */,
};
c29_String_t ALIGN4 str3={
(object_pointer)&str3_arr /* value */,/*.gcinfo=*/1, /*.class_id=*/C29_STRING_ID, 
};

/* translation callbacks */

/* Task management */
c6_Thread_t ALIGN4 __DOSEK_APPDATA_dom1__task1_obj = {/*.gcinfo=*/1, /*.class_id=*/C6_THREAD_ID,
	NULL /* _stack */,
	((object_pointer) &__DOSEK_APPDATA_dom1__task1_user_obj) /* _user_object */,
	task1 /* _task_id */};

/* Alarm management */
c4_Alarm_t ALIGN4 __DOSEK_APPDATA_dom1__alarm1_obj = {/*.gcinfo=*/1, /*.class_id=*/C4_ALARM_ID,
	alarm1 /* _alarm_id */};

/* usercode task objects */
c5_HelloWorld_t ALIGN4 __DOSEK_APPDATA_dom1__task1_user_obj = {/*.gcinfo=*/1, /*.class_id=*/C5_HELLOWORLD_ID, /*.c5f1_runs=*/0};
KESO_TASKCLASSTYPE *keso_curr_task;


/* Returns a pointer to the currently running Task
 * keso_task_index is initialised with NULL, which
 * represents the INVALID_TASK Java task object.
 */
KESO_TASKCLASSTYPE *keso_curr_task_fkt(void) {
	TaskType taskID;
	GetTaskID(&taskID);
	return keso_task_index[taskID];
}

c6_Thread_t* keso_task_index[KESO_MAX_TASK];

