/* THIS FILE IS AUTO-GENERATED BY KESO! DON'T EDIT */

#ifndef __C1_OBJECT_H__
#define __C1_OBJECT_H__
#include "keso_object_pointer.h"
#include "keso_types.h"

#define C1_OBJECT_ID ((class_id_t)1)

/* object data */
typedef struct {
/* c1_Object */
OBJECT_HEADER
/* c1_Object */
} c1_Object_t;
#define C1_OBJECT_OBJ(_obj_) ((c1_Object_t*)(_obj_))
#define KESO_ALLOC_C1_OBJECT() KESO_ALLOC(C1_OBJECT_ID,sizeof(c1_Object_t),0)
#define KESO_ALLOC_STACK_C1_OBJECT(_mem_) keso_alloc_stack((object_pointer)&(_mem_), C1_OBJECT_ID,sizeof(c1_Object_t),0)
#define KESO_ALLOC_INLINE_C1_OBJECT() KESO_ALLOC(C1_OBJECT_ID,sizeof(c1_Object_t),0)

/* class methods prototypes */
/* c1_Object_m2_hashCode #non_blocking */
/* hashCode()I */
jint c1_Object_m2_hashCode(object_pointer obj0);



#endif /* !defined(__C1_OBJECT_H__) */
