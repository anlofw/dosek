/* THIS FILE IS AUTO-GENERATED BY KESO! DON'T EDIT */

#ifndef __C14_ERROR_H__
#define __C14_ERROR_H__
#include "keso_object_pointer.h"
#include "keso_types.h"

#define C14_ERROR_ID ((class_id_t)14)

/* object data */
typedef struct {
/* c14_Error */
/* c10_Throwable */
	object_pointer c10f1_message;
/* c1_Object */
OBJECT_HEADER
/* c1_Object */
/* c10_Throwable */
/* c14_Error */
} c14_Error_t;
#define C14_ERROR_OBJ(_obj_) ((c14_Error_t*)((object_pointer*)(_obj_)-1))
#define ACCFIELD_C14_ERROR_C10F1_MESSAGE(_obj_) (C14_ERROR_OBJ(_obj_)->c10f1_message)
#define KESO_ALLOC_C14_ERROR() KESO_ALLOC(C14_ERROR_ID,sizeof(c14_Error_t),1)
#define KESO_ALLOC_STACK_C14_ERROR(_mem_) keso_alloc_stack((object_pointer)&(_mem_), C14_ERROR_ID,sizeof(c14_Error_t),1)
#define KESO_ALLOC_INLINE_C14_ERROR() KESO_ALLOC(C14_ERROR_ID,sizeof(c14_Error_t),1)

/* class methods prototypes */
/* c14_Error_m1__init_ #non_blocking */
/* <init>(Ljava/lang/String;)V */
void c14_Error_m1__init_(object_pointer obj0, object_pointer obj1);



#endif /* !defined(__C14_ERROR_H__) */
